#include "Includes.h"

unsigned char UnlockAll[] = { 0x0A, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x02, 0x02, 0x02, 0x09, 0x09, 0x02, 0x02, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x04, 0x02, 0x04, 0x04, 0x04, 0x02, 0x04, 0x04, 0x02, 0x02, 0x03, 0x03, 0x03, 0x02, 0x03, 0x05, 0x05, 0x05, 0x05, 0x05, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0xF4, 0x30, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xC4, 0x09, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xC4, 0x09, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xC4, 0x09, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xC4, 0x09, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xB0, 0x04, 0x00, 0x00, 0xB0, 0x04, 0x00, 0x00, 0xB0, 0x04, 0x00, 0x00, 0xB0, 0x04, 0x00, 0x00, 0xFA, 0x00, 0x00, 0x00, 0x00, 0x61, 0x08, 0x00, 0x0F, 0x40, 0x00, 0x00, 0xFA, 0x00, 0x00, 0x00, 0xFA, 0x00, 0x00, 0x00, 0xEE, 0x02, 0x00, 0x00, 0x84, 0x03, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0xFA, 0x00, 0x00, 0x00, 0xEE, 0x02, 0x00, 0x00, 0xFA, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xEE, 0x02, 0x00, 0x00, 0x40, 0x24, 0x14, 0x00, 0x0F, 0x40, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x50, 0xC3, 0x00, 0x00, 0x50, 0xC3, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xFA, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xE8, 0x03, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x13, 0x00, 0x18, 0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0xFA, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xDD, 0x99, 0x03 };

opd_s R_AddCmdDrawStretchPic_t = { 0x97D60, TOC };
opd_s R_AddCmdDrawStretchPicRotateXY_t = { 0x4C7158, TOC };
opd_s R_AddCmdDrawText_t = { 0x4C7248, TOC };
opd_s R_AddCmdDrawTextWithEffect_t = { 0x4C7258, TOC };
opd_s R_RegisterFont_t = { 0x4C7228, TOC };
opd_s RegisterHandle_t = { 0x4C6D28, TOC };
opd_s Key_IsDown_t = { 0xA4FF0, TOC };
opd_s UI_PlayLocalSoundAliasByName_t = { 0x2449A0, TOC };
opd_s UI_DrawKeyboard_t = { 0x238070, TOC };

void(*UI_DrawKeyboard)(int localClientNum, const char *title, const char *presetMessage, size_t size, UI_KeyboardCallback function) = (void(*)(int, const char *, const char *, size_t, UI_KeyboardCallback))&UI_DrawKeyboard_t;
void(*R_AddCmdDrawStretchPic)(float x, float y, float width, float height, float xScale, float yScale, float xay, float yay, const float *color, void *material) = (void(*)(float x, float y, float width, float height, float xScale, float yScale, float xay, float yay, const float *color, void *material))&R_AddCmdDrawStretchPic_t;
void(*R_AddCmdDrawStretchPicRotateXY)(float, float, float, float, float, float, float, float, float, float*, void*) = (void(*)(float, float, float, float, float, float, float, float, float, float*, void*))&R_AddCmdDrawStretchPicRotateXY_t;
void(*R_AddCmdDrawText)(const char *text, int maxChars, void *font, float x, float y, float xScale, float yScale, float rotation, const float *color, int style) = (void(*)(const char *, int, void *, float, float, float, float, float, const float *color, int))&R_AddCmdDrawText_t;
void(*R_AddCmdDrawTextWithEffect)(const char *text, int maxChars, void *font, float x, float y, float xScale, float yScale, float rotation, const float *color, int style, const float *glowColor, void *fxMaterial, void *fxMaterialGlow, int fxBirthTime, int fxLetterTime, int fxDecayStartTime, int fxDecayDuration) = (void(*)(const char *, int, void *, float, float, float, float, float, const float *, int, const float *, void *, void *, int, int, int, int))&R_AddCmdDrawTextWithEffect_t;
void*(*R_RegisterFont)(const char * font, int imageTrac) = (void*(*)(const char *, int))&R_RegisterFont_t;
void*(*Material_Register)(const char * Font, int ImageTrac) = (void*(*)(const char *, int))&RegisterHandle_t;
int(*Key_IsDown)(int localClientNum, int keyNum) = (int(*)(int, int))&Key_IsDown_t;
void(*UI_PlayLocalSoundAliasByName)(int localClientNum, const char* aliasName) = (void(*)(int, const char*))&UI_PlayLocalSoundAliasByName_t;

void DrawKeyboard(const char *title, const char *presetMessage, size_t size, uint32_t panelMode, UI_KeyboardCallback function) {
	WriteProcessMemory(0x2F7BDA, (void*)HIWORD(panelMode), 2);
	UI_DrawKeyboard(0, title, presetMessage, size, function);
	WriteProcessMemory(0x2F7BDA, (void*)HIWORD(CELL_OSKDIALOG_PANELMODE_ALPHABET), 2);
}

void KeyboardCallback(int localClientNum, bool ifExecuted, const char *text) {
	if (ifExecuted && strlen(text)) {
		if (pMenu->customCmd) {
			Cbuf_AddText(0, text);
			pMenu->customCmd = false;
		}
		else if (pMenu->setName) {
			memcpy((void*)0x1F9F11C, text, 32);
			pMenu->setName = false;
		}
	}
}

uint8_t getResolution()
{
	CellVideoOutConfiguration config;
	cellVideoOutGetConfiguration(CELL_VIDEO_OUT_PRIMARY, &config, NULL);
	return config.resolutionId;
}

void DrawText(const char *text, const char *fontName, float x, float y, float scale, Color color) {
	uint8_t res = getResolution();
	float yScale = scale;
	if (res == CELL_VIDEO_OUT_RESOLUTION_1280x1080) {
		y = (y * 1.5);
		yScale += 0.15;
	}
	R_AddCmdDrawText(text, 0x7FFFFFFF, R_RegisterFont(fontName, 0), x, y, scale, yScale, 0, (float*)&color, 0);
}

void DrawTextWithEffect(const char *text, const char *fontName, float x, float y, float scale, Color color, Color glowColor) {
	uint8_t res = getResolution();
	float yScale = scale;
	if (res == CELL_VIDEO_OUT_RESOLUTION_1280x1080) {
		y = y * 1.5;
		yScale += 0.15;
	}
	R_AddCmdDrawTextWithEffect(text, 0x7FFFFFFF, R_RegisterFont(fontName, 0), x, y, scale, yScale, 0, (float*)&color, 0, (float*)&glowColor, 0, 0, 0, 0, 0, 0);
}

void DrawShader(float x, float y, float width, float height, Color color, const char *material) {
	uint8_t res = getResolution();
	if (res == CELL_VIDEO_OUT_RESOLUTION_1280x1080) {
		height = height * 1.5;
		y = y * 1.5;
	}
	R_AddCmdDrawStretchPic(x, y, width, height, 0, 0, 1, 1, (float*)&color, Material_Register(material, 0));
}

const char* Options[] = { "Change Name", "Cycle Level", "Cycle Prestige", "Unlock All", "Reset Account", "Custom Command", "FFA Force Host", "Team Force Host", "Toggle DLC" };
void DrawMenu() {

	if (!(level->menuFlags & __nopregametext__)) {
		char* ctrlText = (char*)0x10062000;
		if (pMenu->isOpen)
			strncpy(ctrlText, "^1L1/R1 - Scroll | L3 - Select | [] - Close | L2/R2 - Up/Down", 255);
		else
			strncpy(ctrlText, "^1Press L3 to open the Pre-Game Menu | Menu developed by EternalModz", 255);

		DrawText(ctrlText, "fonts/smalldevfont", 50, 695, 2, Color(1, 1, 1, 1));
		//                                                ^
		//                  Adjust this value for font size
	}

	DrawShader(510, 50, 260, 275, pMenu->bgColor, "Black");
	DrawShader(508, 50, 2, 275, pMenu->lineColor, "white");
	DrawShader(508, 48, 264, 2, pMenu->lineColor, "white");
	DrawShader(770, 50, 2, 275, pMenu->lineColor, "white");
	DrawShader(508, 325, 264, 2, pMenu->lineColor, "white");

	DrawTextWithEffect("Atlantic", "fonts/objectivefont", 580, 100, .7, pMenu->titleColor, pMenu->titleGlow);
	for(int i = 0; i < 9; i++)
		DrawTextWithEffect(Options[i], "fonts/objectivefont", 515, 130 + (20 * i), .7, pMenu->textColor[i], pMenu->glowColor[i]);

	DrawText(va("%i", pMenu->currentLevel), "fonts/objectivefont", 725, 130 + (20 * 1), .7, pMenu->textColor[1]);
	DrawText(va("%i", pMenu->currentPrestige), "fonts/objectivefont", 725, 130 + (20 * 2), .7, pMenu->textColor[2]);
	DrawText(pMenu->forceHost ? "^2ON" : "^1OFF", "fonts/objectivefont", 725, 130 + (20 * 6), .7, pMenu->textColor[6]);
	DrawText(pMenu->teamForceHost ? "^2ON" : "^1OFF", "fonts/objectivefont", 725, 130 + (20 * 7), .7, pMenu->textColor[7]);
	DrawText(*(int*)0x1F96708 == 1 ? "^2ON" : "^1OFF", "fonts/objectivefont", 725, 130 + (20 * 8), .7, pMenu->textColor[8]);
}

int XP_TABLE[] = { 0, 500, 1700, 3600, 6200, 9500, 13500, 18200, 23600, 29700, 36500, 44300, 53100, 62900, 73700, 85500, 98300, 112100, 126900, 142700, 159500, 177300, 196100, 215900, 2367000, 258500, 281300, 305100, 329900, 355700, 382700, 410900, 440300, 470900, 502700, 535700, 569900, 605300, 641900, 679700, 718700, 758900, 800300, 842900, 886700, 931700, 977900, 1025300, 1073900, 1123700, 1175000, 1227800, 1282100, 1337900, 1395200, 1454000, 1514300, 1576100, 1639400, 1704200, 1770500, 1838300, 1907600, 1978400, 2050700, 2124500, 2199800, 2276600, 2354900, 2516000 };

void doLevels() {
	unsigned char byte[4];
	for (int i = 0; i < 4; i++)
		byte[i] = (unsigned char)((XP_TABLE[pMenu->currentLevel - 1] >> (8 * i)) & 0xFF);
	memcpy((void*)0x1FF9A94, &byte, 4);
}

void doPrestige() {
	unsigned char prestige;
	switch (pMenu->currentPrestige)
	{
	case 0: prestige = 0x00; break;
	case 1: prestige = 0x01; break;
	case 2: prestige = 0x02; break;
	case 3: prestige = 0x03; break;
	case 4: prestige = 0x04; break;
	case 5: prestige = 0x05; break;
	case 6: prestige = 0x06; break;
	case 7: prestige = 0x07; break;
	case 8: prestige = 0x08; break;
	case 9: prestige = 0x09; break;
	case 10: prestige = 0x0A; break;
	case 11: prestige = 0x0B; break;
	}
	*(char*)0x1FF9A9C = prestige;
}

void toggleFFAFH() {
	unsigned char toggle = (pMenu->forceHost ? 0x01 : 0x00);
	WriteProcessMemory(0x1D148C7, toggle, 1);
	WriteProcessMemory(0x1D148B8, toggle, 1);
}

void teamBasedForceHost(bool reset) {
	if (!reset)
		Cbuf_AddText(0, "set party_connectTimeout 1;set party_host 1;set party_hostmigration 0;set onlinegame 1;set onlinegameandhost 1;set onlineunrankedgameandhost 0;set migration_msgtimeout 0;set migration_timeBetween 999999;set migration_verboseBroadcastTime 0;set migrationPingTime 1;set bandwidthtest_duration 0;set bandwidthtest_enable 0;set bandwidthtest_ingame_enable 0;set bandwidthtest_timeout 0;set cl_migrationTimeout 0;set lobby_partySearchWaitTime 0;set bandwidthtest_announceinterval 0;set partymigrate_broadcast_interval 99999;set partymigrate_pingtest_timeout 0;set partymigrate_timeout 0;set partymigrate_timeoutmax 0;set partymigrate_pingtest_retry 0;set partymigrate_pingtest_timeout 0;set g_kickHostIfIdle 0;set xblive_playEvenIfDown 1;set party_hostmigration 0;set badhost_endGameIfISuck 0;set badhost_maxDoISuckFrames 0;set badhost_maxHappyPingTime 999;set badhost_minTotalClientsForHappyTest 18;");
	else
		Cbuf_AddText(0, "set party_connectTimeout 1000;set party_host 1;set party_hostmigration 1;set migration_msgtimeout 500;set migration_timeBetween 30000;set migration_verboseBroadcastTime 100;set migrationPingTime 10;set bandwidthtest_duration 500;set bandwidthtest_enable 1;set bandwidthtest_ingame_enable 1;set bandwidthtest_timeout 1500;set cl_migrationTimeout 40;set lobby_partySearchWaitTime 1000;set bandwidthtest_announceinterval 200;set partymigrate_broadcast_interval 200;set partymigrate_pingtest_timeout 600;set partymigrate_timeout 8000;set partymigrate_timeoutmax 15000;set partymigrate_pingtest_retry 100;set partymigrate_pingtest_timeout 600;set g_kickHostIfIdle 1;set xblive_playEvenIfDown 0;set party_hostmigration 1;set badhost_endGameIfISuck 1;set badhost_maxDoISuckFrames 300;set badhost_maxHappyPingTime 400;set badhost_minTotalClientsForHappyTest 3;reset party_minPlayers");
}

void updateButtons(bool reset) {
	if (!reset) {
		if (Key_IsDown(0, L1)) {
			pMenu->L1 = true;
			sleep(150);
		}
		if (Key_IsDown(0, R1)) {
			pMenu->R1 = true;
			sleep(150);
		}
		if (Key_IsDown(0, L2)) {
			pMenu->L2 = true;
			sleep(150);
		}
		if (Key_IsDown(0, R2)) {
			pMenu->R2 = true;
			sleep(150);
		}
		if (Key_IsDown(0, Dpad_Left)) {
			pMenu->Left = true;
			sleep(150);
		}
		if (Key_IsDown(0, Dpad_Right)) {
			pMenu->Right = true;
			sleep(150);
		}
		if (Key_IsDown(0, Square)) {
			pMenu->Square = true;
			sleep(150);
		}
		if (Key_IsDown(0, R3)) {
			pMenu->R3 = true;
			sleep(150);
		}
		if (Key_IsDown(0, L3)) {
			pMenu->L3 = true;
			sleep(150);
		}
	}
	else
		pMenu->L1 = pMenu->R1 = pMenu->L2 = pMenu->R2 = pMenu->Left = pMenu->Right = pMenu->L3 = pMenu->R3 = pMenu->Square = false;
}